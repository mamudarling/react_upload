{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","latest","setLatest","result","setResult","search","setSearch","useEffect","axios","all","get","then","responseArr","data","catch","err","console","log","lastUpdated","Date","parseInt","updated","toString","countries","filter","item","country","includes","map","i","Card","bg","text","className","style","margin","Img","variant","src","countryInfo","flag","height","Body","Title","Text","cases","deaths","recovered","todayCases","todayDeaths","active","critical","textAlign","CardDeck","Footer","Form","Group","controlId","Control","type","placeholder","onChange","e","target","value","queries","columns","query","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.80ada6cf.chunk.js","sourcesContent":["import React,{useEffect,useState}  from 'react'\nimport Card from 'react-bootstrap/Card'\nimport CardDeck from 'react-bootstrap/CardDeck';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport axios from 'axios';\nimport Columns from 'react-columns';\nimport Form from 'react-bootstrap/Form'\n\nfunction App() {\n  const [latest,setLatest] = useState([]);\n  const [result,setResult] = useState([]);\n  const [search,setSearch] = useState(\" \")\n  useEffect(()=>{\n    axios \n    .all([\n        axios.get(\"https://corona.lmao.ninja/v2/all\"),\n        axios.get(\"https://corona.lmao.ninja/v2/countries?sort=country\")\n    ])\n    .then(responseArr=>{\n      setLatest(responseArr[0].data);\n      setResult(responseArr[1].data)\n    })\n    .catch(err=>{\n      console.log(err)\n    });\n  },[]);\n\n  const date = new Date(parseInt(latest.updated));\n  const lastUpdated = date.toString();\n\n  const filterCountry = result.filter(item =>{\n    return search !== \"\" ? item.country.includes(search) : item;\n  })\n\n  const countries = filterCountry.map((data,i)=>{\n    return(\n      <Card  key={i} bg='light' text='dark' className='text-center' style={{margin:'10px'}}>\n        <Card.Img variant=\"top\" src={data.countryInfo.flag} style={{height:250}}></Card.Img>\n        <Card.Body>\n          <Card.Title>{data.country}</Card.Title>\n          <Card.Text>Cases {data.cases}</Card.Text>\n          <Card.Text>Deaths {data.deaths}</Card.Text>\n          <Card.Text>Recovered {data.recovered}</Card.Text>\n          <Card.Text>Today's cases {data.todayCases}</Card.Text>\n          <Card.Text>Today's deaths {data.todayDeaths}</Card.Text>\n          <Card.Text>Active {data.active}</Card.Text>\n          <Card.Text>Critical {data.critical}</Card.Text>\n        </Card.Body>\n      </Card>\n    )\n  })\n\n   var queries =[{\n     columns:2,\n     query:'min-width:500px'\n   },{\n     columns:3,\n     query:'min-width:1000px'\n   }];\n  return (\n    <div>\n      <br/>\n      <h2 style={{textAlign:'center'}}>Covid-19 Status</h2>\n      <br/>\n    <CardDeck>\n  <Card bg='secondary' text='white' className='text-center' style={{margin:'10px'}}>\n    <Card.Body>\n      <Card.Title>Cases</Card.Title>\n      <Card.Text>\n       {latest.cases}\n      </Card.Text>\n    </Card.Body>\n    <Card.Footer>\n      <small>Last updated {lastUpdated}</small>\n    </Card.Footer>\n  </Card>\n  <Card bg='danger' text='white' className='text-center' style={{margin:'10px'}}>\n    <Card.Body>\n      <Card.Title>Deaths</Card.Title>\n      <Card.Text>\n       {latest.deaths}\n      </Card.Text>\n    </Card.Body>\n    <Card.Footer>\n    <small>Last updated {lastUpdated}</small>\n    </Card.Footer>\n  </Card>\n  <Card bg='success' text='white' className='text-center' style={{margin:'10px'}}>\n    <Card.Body>\n      <Card.Title>Recovered</Card.Title>\n      <Card.Text>\n        {latest.recovered}\n      </Card.Text>\n    </Card.Body>\n    <Card.Footer>\n     <small>Last updated {lastUpdated}</small>\n    </Card.Footer>\n  </Card>\n</CardDeck>\n<br/>\n<Form>\n  <Form.Group controlId=\"formGroupSearch\">\n    {/* <Form.Label>Search</Form.Label> */}\n    <Form.Control type=\"text\" placeholder=\"Search a country\" onChange={e=>setSearch(e.target.value)}/>\n  </Form.Group>\n\n</Form>\n<Columns queries={queries}>\n  {countries}\n</Columns>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}